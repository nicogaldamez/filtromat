/*
 * File: app/controller/Products.js
 *
 * This file was generated by Sencha Architect version 3.0.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('FiltroMat.controller.Orders', {
    extend: 'Ext.app.Controller',
    alias: 'controller.orders',
    
    requires: [
      'FiltroMat.view.NewOrder',
    ],

    config: {
        refs: {
            customerTxt: '#newOrderCustomerTxt',
            customersList: '#orderCustomersList',
            productTxt: '#newOrderProductTxt',
            productsList: '#orderProductsList',
            newOrderForm: '#newOrderForm',
            saveBtn: '#saveOrderBtn',
            orderQuantity: '#orderQuantityTxt',
            ordersView: '#ordersView',
            ordersList: '#ordersList',
            editOrderBtn: 'button#editOrderBtn',
            newOrderBtn: 'button#newOrderBtn',
            searchOrder: '#searchOrder',
            ordersNav: '#ordersNav',
            ordersActionSheet: '#ordersActionSheet',
            deleteOrder: '#deleteOrder'
        },

        control: {
          "saveBtn": {
            tap: 'onSaveOrderBtnTap'
          },
          "customerTxt": {
              keyup: 'onCustomerTxtKeyUp',
              clearicontap: 'customerClearIconTap'
          },
          "customersList": {
            itemtap: 'onCustomersListTap'
          },
          "productTxt": {
              keyup: 'onProductTxtKeyUp',
              clearicontap: 'productClearIconTap'
          },
          "searchOrder": {
              keyup: 'onSearchOrder'
          },
          "productsList": {
            itemtap: 'onProductsListTap'
          },
          "#newOrderBtn": {
              tap: 'onNewOrderTap'
          },
          "ordersNav": {
              activeitemchange: 'onNavigationviewActiveItemChange'
          },
          "ordersList": {
              itemsingletap: 'onListItemSingletap',
              itemtaphold: 'onItemTapHold'
          },
          'deleteOrder': {
            tap: 'onDeleteOrder'
          }
        }
    },
    
    // Click en botón para crear un pedido
    onNewOrderTap: function(button, e, eOpts) {
        var navView = this.getOrdersNav();
        var newOrder = this.getNewOrderForm();
        if (newOrder == undefined) 
          newOrder = { xtype: 'neworder'}
        navView.push(newOrder);

    },

    // Evento que se ejecuta cuando cambia la view del navigation view de pedidos
    onNavigationviewActiveItemChange: function(container, value, oldValue, eOpts) {
        var newOrderBtn = this.getNewOrderBtn();
        var editOrderBtn = this.getEditOrderBtn();

        newOrderBtn.hide();
        editOrderBtn.hide();
        
        if (value.getItemId() == 'ordersList') {
          newOrderBtn.show();
        } 
    },
    
    // ---------- ORDER FORM ------------
    
    // Keyup del campo de cliente
    onCustomerTxtKeyUp: function (field, e, options) {
      var me = this;
      var value = field.getValue().trim();

      if (value.length == 0) {
          this.getCustomersList().deselectAll();
          this.getCustomersList().hide();
          return;
      }
      
      // filtro los clientes
      var store = this.getCustomersList().getStore();
      store.clearFilter();
      store.filter('name', value);
      
      this.getCustomersList().show();
    },
    
    // Click en la X para limpiar el campo de cliente
    customerClearIconTap: function (src, e, eOpts) {
        this.getCustomersList().deselectAll();
        this.getCustomersList().hide();
    },
    
    // Click en un cliente del autocomplete
    onCustomersListTap: function (src, index, target, record, e, eOpts) {
        this.getCustomerTxt().setValue(record.get('name'));
        this.getCustomerTxt().idFromRecord = record.get('key');
        src.hide();
    },
    
    // Keyup del campo de productos
    onProductTxtKeyUp: function (field, e, options) {
      var me = this;
      var value = field.getValue().trim();

      if (value.length == 0) {
        this.idFromRecord = null;
        this.getProductsList().deselectAll();
        this.getProductsList().hide();
        return;
      }
      
      // filtro los productos
      var store = this.getProductsList().getStore();
      store.clearFilter();
      store.filter('name', value);
      
      this.getProductsList().show();
    },
    
    // Click en la X para limpiar el campo de producto
    productClearIconTap: function (src, e, eOpts) {
        this.getProductsList().deselectAll();
        this.getProductsList().hide();
    },
    
    // Click en un producto del autocomplete
    onProductsListTap: function (src, index, target, record, e, eOpts) {
        this.getProductTxt().setValue(record.get('name'));
        this.getProductTxt().idFromRecord = record.get('key');
        src.hide();
    },
    
    
    // Click en el botón de guardar pedido
    onSaveOrderBtnTap: function(button, e, eOpts) {
      var newOrderForm = this.getNewOrderForm();
      var store = Ext.getStore('OrderStore');
      var customer = this.getCustomerTxt().idFromRecord;
      var product = this.getProductTxt().idFromRecord;
      var quantity = this.getOrderQuantity().getValue();
      var url = Ext.getStore('OrderStore').getProxy().getUrl();
      
      var params = {
        customerKey: customer,
        orderItemResources: Ext.JSON.encode([
          {
            productKey: product,
            quantity: quantity
          }
        ])
      };
      Ext.Ajax.request({
        url: url,
        method: "POST",
        params: params,
        headers: {
          'Accept': 'application/json',
          'Authorization': 'Basic Zml0ejpyb3kyMA=='
        },
        success: function(){
          alert("sucessful");
        },
        failure: function(){ 
          Ext.Msg.alert('Error', 'Ocurrió un error al guardar el pedido');
        }

      });
      
      // var record = Ext.create("FiltroMat.model.Order");
//       record.customerKey = customer;
//       record.orderItems().add({
//             productKey: product,
//             quantity: quantity
//       });
//       record.id = record.internalId = record.data.key = '';
//       
//       errs = record.validate();
//       if (!errs.isValid()) {
//           Ext.Msg.alert('Error', 'Verifique que cargó correctamente los campos');
//       } else {
//           me = this;
//           record.save({
//               success: function() {
//                   if (newRecord) {
//                       store.add(record);
//                       var recordData = record;
//                   } else {
//                       // Actualizo el store
//                       var recordData = store.getById(record.id);
//                       recordData.set(values);
//                   }
// 
//                   // Vuelvo a la pantalla de pedidos
//                   var navView = this.getOrdersNav();
//                   navView.push(this.getOrdersView());
//               },
//               error: function() {
//                   Ext.Msg.alert('Error', 'Ocurrió un error al guardar el pedido');
//               }
//           });
//       }
    },
    
    // Keyup. Búsqueda/Filtro de pedidos
    onSearchOrder: function(textfield, e, eOpts) {
        var value = textfield.getValue();
        var store = Ext.getStore('OrderStore');
        store.clearFilter();
        store.filter('customerName', value);
    },
    
    // Click en algún item de la lista de pedidos
    onListItemSingletap: function(dataview, index, target, record, e, eOpts) {
        var navView = this.getOrdersNav();

        var orderDetail = Ext.create('FiltroMat.view.OrderDetail', {itemId:'orderDetail', title: 'Detalle Pedido'});
        orderDetail.setData(record.getData());
        navView.push(orderDetail);
    },
    
    // Al dejar el dedo presionado sobre un pedido se muestra un menú
    onItemTapHold: function (list, idx, target, record, evt) {
      var actionSheet = Ext.getCmp('ordersActionSheet');
      actionSheet.show();
    }, 
    
    // onDeleteOrder: function
    
    

});