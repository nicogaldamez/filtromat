/*
 * File: app/controller/Products.js
 *
 * This file was generated by Sencha Architect version 3.0.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('FiltroMat.controller.Orders', {
    extend: 'Ext.app.Controller',
    alias: 'controller.orders',
    
    requires: [
      'FiltroMat.view.NewOrder',
    ],

    config: {
        refs: {
            // Order customer
            customerTxt: '#newOrderCustomerTxt',
            customersList: '#orderCustomersList',
            // Order product
            productTxt: '#newOrderProductTxt',
            productsList: '#orderProductsList',
            // Order list
            newOrderForm: '#newOrderForm',
            newOrderBtn: 'button#newOrderBtn',
            ordersList: '#ordersList',
            // New order
            saveBtn: 'button#saveOrderBtn',
            orderQuantity: '#orderQuantityTxt',
            ordersView: '#ordersView',
            // Order detail
            moreOrderBtn: 'button#moreOrderBtn',
            searchOrder: '#searchOrder',
            ordersNav: '#ordersNav',
            ordersActionSheet: '#ordersActionSheet',
            deleteOrder: 'button#deleteOrder',
            saveTransactionBtn: 'button#saveTransactionBtn',
            transactionAmount: 'button#transactionAmount',
            transactionIsPayment: 'button#transactionIsPayment',
            cancelDebtBtn: 'button#cancelDebtBtn',
            markAsDeliveredBtn: 'button#markAsDeliveredBtn'
        },

        control: {
    			'button[pathButtonType=menuitem]': {
    				itemtap: 'onPathMenuItemTap'
    			},
          "saveBtn": {
            tap: 'onSaveOrderBtnTap'
          },
          "customerTxt": {
              keyup: 'onCustomerTxtKeyUp',
              clearicontap: 'customerClearIconTap'
          },
          "customersList": {
            itemtap: 'onCustomersListTap'
          },
          "productTxt": {
              keyup: 'onProductTxtKeyUp',
              clearicontap: 'productClearIconTap'
          },
          "searchOrder": {
              keyup: 'onSearchOrder',
              clearicontap: 'onSearchOrder'
          },
          "productsList": {
            itemtap: 'onProductsListTap'
          },
          "#newOrderBtn": {
              tap: 'onNewOrderTap'
          },
          "ordersNav": {
              activeitemchange: 'onNavigationviewActiveItemChange'
          },
          "ordersList": {
              itemsingletap: 'onListItemSingletap'
          },
          'deleteOrder': {
            tap: 'onDeleteOrder'
          },
          'moreOrderBtn': {
            tap: 'displayMoreOptions'
          },
          'saveTransactionBtn': {
            tap: 'onSaveTransactionBtnTap'
          },
          'cancelDebtBtn': {
            tap: 'onCancelDebtBtnTap'
          },
          'markAsDeliveredBtn': {
            tap: 'onMarkAsDeliveredBtnTap'
          }
        }
    },
    
    // Click en botón para crear un pedido
    onNewOrderTap: function(button, e, eOpts) {
        var navView = this.getOrdersNav();
        var newOrder = this.getNewOrderForm();
        if (newOrder == undefined) 
          newOrder = { xtype: 'neworder'}
        navView.push(newOrder);

    },
    
    // Click en el botón para mostrar más opciones
    displayMoreOptions: function (button, e, eOpts) {
      //---- Oculto o muestro los botones segun el estado de la orden ---
      var order = Ext.getCmp('orderDetail').getData();
      // Está pagado
      if (order.statusKey == FiltroMat.utils.Config.getDeliveredPaidStatus())
        this.getCancelDebtBtn().hide();
      else
        this.getCancelDebtBtn().show();
      // Está pendiente de envío?
      if (order.statusKey == FiltroMat.utils.Config.getPendingDeliveryStatus())
        this.getMarkAsDeliveredBtn().show();  
      else
        this.getMarkAsDeliveredBtn().hide();
        
      //---- Muestro el menú ---
      var actionSheet = Ext.getCmp('ordersActionSheet');
      actionSheet.show();
    }, 
    
    // Click en el botón para eliminar un cliente
    onDeleteOrder: function(button, e, eOpts) {
        Ext.Msg.confirm("Eliminar Pedido", "¿Está seguro?", function(btn) {
          if (btn == 'yes') {
            var data = Ext.getCmp('orderDetail').getData();
            var store = Ext.getStore("OrderStore");
            var record = store.getById(data.key);
            record.id = record.data.key;

            // Elimino el registro
            record.erase({
                 success: function() {
                    // Vuelvo a la pantalla de pedidos si se borra correctamente
                    var navView = Ext.getCmp('ordersNav');
                    navView.reset();
                },
                 failure: function() {
                     Ext.Msg.alert('Error', 'Ocurrió un error al intentar eliminar el pedido');
                 }
            });
          }
        });
    },

    // Evento que se ejecuta cuando cambia la view del navigation view de pedidos
    onNavigationviewActiveItemChange: function(container, value, oldValue, eOpts) {
        var newOrderBtn = this.getNewOrderBtn();
        var moreOrderBtn = this.getMoreOrderBtn();

        newOrderBtn.hide();
        moreOrderBtn.hide();
        
        if (value.getItemId() == 'ordersList') {
          newOrderBtn.show();
        } else if (value.getItemId() == 'orderDetail') {
          moreOrderBtn.show();
        }
    },
    
    // ---------- ORDER FORM ------------
    
    // Keyup del campo de cliente
    onCustomerTxtKeyUp: function (field, e, options) {
      var me = this;
      var value = field.getValue().trim();

      if (value.length == 0) {
          this.getCustomersList().deselectAll();
          this.getCustomersList().hide();
          return;
      }
      
      // filtro los clientes
      var store = this.getCustomersList().getStore();
      store.clearFilter();
      store.filter('name', value);
      
      this.getCustomersList().show();
    },
    
    // Click en la X para limpiar el campo de cliente
    customerClearIconTap: function (src, e, eOpts) {
        this.getCustomersList().deselectAll();
        this.getCustomersList().hide();
    },
    
    // Click en un cliente del autocomplete
    onCustomersListTap: function (src, index, target, record, e, eOpts) {
        this.getCustomerTxt().setValue(record.get('name'));
        this.getCustomerTxt().idFromRecord = record.get('key');
        src.hide();
    },
    
    // Keyup del campo de productos
    onProductTxtKeyUp: function (field, e, options) {
      var me = this;
      var value = field.getValue().trim();

      if (value.length == 0) {
        this.idFromRecord = null;
        this.getProductsList().deselectAll();
        this.getProductsList().hide();
        return;
      }
      
      // filtro los productos
      var store = this.getProductsList().getStore();
      store.clearFilter();
      store.filter('name', value);
      
      this.getProductsList().show();
    },
    
    // Click en la X para limpiar el campo de producto
    productClearIconTap: function (src, e, eOpts) {
        this.getProductsList().deselectAll();
        this.getProductsList().hide();
    },
    
    // Click en un producto del autocomplete
    onProductsListTap: function (src, index, target, record, e, eOpts) {
        this.getProductTxt().setValue(record.get('name'));
        this.getProductTxt().idFromRecord = record.get('key');
        src.hide();
    },
    
    
    // Click en el botón de guardar pedido
    onSaveOrderBtnTap: function(button, e, eOpts) {
      var newOrderForm = this.getNewOrderForm();
      var store = Ext.getStore('OrderStore');
      var customer = this.getCustomerTxt().idFromRecord;
      var product = this.getProductTxt().idFromRecord;
      var quantity = this.getOrderQuantity().getValue();
      var url = Ext.getStore('OrderStore').getProxy().getUrl();
      
      // Valido nulos
      if (quantity == null || product == undefined || customer == undefined) {
        Ext.Msg.alert('Error', 'Por favor verifique que completó todos los campos con valores válidos');
        return false;        
      }
      
      var params = Ext.JSON.encode({
        customerKey: customer,
        orderItemResources: [
          {
            productKey: product,
            quantity: quantity
          }
        ]
      });
      Ext.Ajax.request({
        url: url,
        method: "POST",
        params: params,
        headers: {
          'Accept': 'application/json',
          'Authorization': FiltroMat.utils.Config.getAuthorizationToken(),
          'Content-Type': 'application/json'
        },
        success: function(response){
          store.add(Ext.create("FiltroMat.model.Order", Ext.JSON.decode(response.responseText)));
          store.load();
          
          // Vuelvo a la pantalla de pedidos
          var navView = Ext.getCmp('ordersNav');
          navView.pop();
        },
        failure: function(){ 
          Ext.Msg.alert('Error', 'Ocurrió un error al guardar el pedido');
        }

      });
    },
    
    // Keyup. Búsqueda/Filtro de pedidos
    onSearchOrder: function(textfield, e, eOpts) {
        var value = textfield.getValue();
        var store = Ext.getStore('OrderStore');
        store.clearFilter();
        store.filter(new Ext.util.Filter({
            property: 'customerName',
            value: value,
            anyMatch: true,
            caseSensitive: false
        }));
    },
    
    // Click en algún item de la lista de pedidos
    onListItemSingletap: function(dataview, index, target, record, e, eOpts) {
        var navView = this.getOrdersNav();

        var orderDetail = Ext.create('FiltroMat.view.OrderDetail', {itemId:'orderDetail', title: 'Detalle Pedido'});
        orderDetail.setData(record.getData());
        navView.push(orderDetail);
    },
    
    // Cambio de estado un pedido
    changeOrderStatus: function(newStatus) {
      var store = Ext.getStore('OrderStore');
      var order = Ext.getCmp('orderDetail').getData();
      var url = store.buildStatusUrl(order.key);  
      var values = Ext.JSON.encode({status: newStatus})
      
      Ext.Ajax.request({
        url: url,
        method: "POST",
        params: values,
        headers: {
          'Accept': 'application/json',
          'Authorization': FiltroMat.utils.Config.getAuthorizationToken(),
          'Content-Type': 'application/json'
        },
        success: function(response){
          store.load();
          
          // Vuelvo a la pantalla de pedidos
          var navView = Ext.getCmp('ordersNav');
          navView.pop();
        },
        failure: function(){ 
          Ext.Msg.alert('Error', 'Ocurrió un error al cancelar el pedido');
        }

      });
    },
    
    // Cambio de estado de un pedido a delivered paid
    onCancelDebtBtnTap: function(button, e, eOpts) {
      this.changeOrderStatus(FiltroMat.utils.Config.getDeliveredPaidStatus());
    },
    
    // Cambio de estado de un pedido a delivered
    onMarkAsDeliveredBtnTap: function(button, e, eOpts) {
      this.changeOrderStatus(FiltroMat.utils.Config.getDeliveredNoPaymentStatus());
    },
    
    // ---------- TRANSACTION ------------
    onSaveTransactionBtnTap: function(button, e, eOpts) {
      var transactionAmount = Ext.getCmp('transactionAmount').getValue();
      var transactionIsPayment = Ext.getCmp('transactionIsPayment').getValue();
      var store = Ext.getStore('TransactionStore');
      var orderStore = Ext.getStore('OrderStore');
      var order = Ext.getCmp('orderDetail').getData();
      var url = Ext.getStore('TransactionStore').buildUrl(order.key);
      
      // Valido nulos
      if (transactionAmount == null) {
        Ext.Msg.alert('Error', 'Por favor verifique que completó todos los campos con valores válidos');
        return false;        
      }
      
      // El monto es mayor del que se debe?
      if (parseFloat(transactionAmount) > order.totalAmount ) {
        Ext.Msg.alert('Error', 'El monto del pago es mayor del que se adeuda');
        return false;
      }
      
      var values = {amount: transactionAmount, payment: transactionIsPayment}
      record = Ext.create("FiltroMat.model.Transaction", values);
      record.getProxy().setUrl(url);
      record.data = values;
      
      errs = record.validate();
      if (!errs.isValid()) {
          Ext.Msg.alert('Error', 'Verifique que cargó correctamente los campos');
      } else {
          me = this;
          record.save({
              success: function() {
                  store.add(record);
                  store.load();
                  
                  orderStore.load({
                    callback: function(records, operation, success) {
                      order = orderStore.getById(order.key);
                      Ext.getCmp('orderDetail').setData(order.data);
                      Ext.getCmp('orderDetail').getAt(0).setData(order.data);
                    }
                  });
                  
                  // Limpio los campos
                  Ext.getCmp('transactionAmount').setValue('');
                  Ext.getCmp('transactionIsPayment').setValue(1);
              },
              failure: function() {
                  Ext.Msg.alert('Error', 'Ocurrió un error al guardar la transacción');
              }
          });


      }
    }
    
    

});